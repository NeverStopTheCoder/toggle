{"entries":[{"timestamp":1743558423104,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":3127,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"dm9?zHeVN[9~wzZ,#nhj\">Toggle</variable><variable id=\"_:qkzgCsc5:*.7`[yh*5\">Toggle2</variable><variable id=\"u}|kFN08ux=h4muIl=%f\">Toggle3</variable><variable id=\"?j-5xa}*(tGI![*Fhd{D\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"dm9?zHeVN[9~wzZ,#nhj\">Toggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"toggle_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"_:qkzgCsc5:*.7`[yh*5\">Toggle2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"toggle_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"toggle_setSliderPosition3\"><value name=\"toggle\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"_:qkzgCsc5:*.7`[yh*5\">Toggle2</field></shadow></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">13</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"u}|kFN08ux=h4muIl=%f\">Toggle3</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"toggle_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">10</field></shadow></value></block></value><next><block type=\"toggle_setSliderPosition3\"><value name=\"toggle\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"u}|kFN08ux=h4muIl=%f\">Toggle3</field></shadow></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"toggle_cycleToNextSlider\"></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":22,"diffs":[[1,"    \"name\": \"Toggle #2\",\n"]]},{"start1":72,"length1":22,"diffs":[[1,"        \"device\": \"*\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\"\n"]]},{"start1":264,"length1":0,"diffs":[[1,"        \"custom.ts\",\n"]]},{"start1":307,"length1":44,"diffs":[[1,""]]}]},{"type":"removed","filename":"custom.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1743558423103,"editorVersion":"2.0.46","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"dm9?zHeVN[9~wzZ,#nhj\">Toggle</variable><variable id=\"_:qkzgCsc5:*.7`[yh*5\">Toggle2</variable><variable id=\"u}|kFN08ux=h4muIl=%f\">Toggle3</variable><variable id=\"?j-5xa}*(tGI![*Fhd{D\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"dm9?zHeVN[9~wzZ,#nhj\">Toggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"toggle_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"_:qkzgCsc5:*.7`[yh*5\">Toggle2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"toggle_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"toggle_setSliderPosition3\"><value name=\"toggle\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"_:qkzgCsc5:*.7`[yh*5\">Toggle2</field></shadow></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">13</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"u}|kFN08ux=h4muIl=%f\">Toggle3</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"toggle_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">10</field></shadow></value></block></value><next><block type=\"toggle_setSliderPosition3\"><value name=\"toggle\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"u}|kFN08ux=h4muIl=%f\">Toggle3</field></shadow></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"toggle_cycleToNextSlider\"></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","y.ts":"\nenum ToggleEnum {\n    //%block=\"On\"\n    On,\n    //%block=\"Off\"\n    Off\n}\n\n//% block=\"Toggle\"\n//% color=#66CC66\n//% icon=\"\"\n//% weight=85\nnamespace toggle {\n    let selectedToggle: Sprite = null;\n    let toggleBases: Sprite[] = [];\n    let togglesTexts: Sprite[] = []; // Array to store text sprites for slider values\n    let sliderOrientations: boolean[] = [];\n    let movingA = false;\n    let toggleToggle: boolean[] = [];\n    let toggleKnobs: Sprite[] = [];\n    let c = 0\n    //% block=\"create toggle of color $color and toggle color $linecolor\"\n    //% blockSetVariable=Toggle\n    //% group=\"Create\"\n    //% color.shadow=\"colorindexpicker\"\n    //% linecolor.shadow=\"colorindexpicker\"\n    export function createSlider3(color: number, linecolor: number): Sprite {\n        let sliderIndex = toggleBases.length;\n\n        // Create the bar for the slider (default: horizontal)\n        let baseImage = image.create(50, 20);\n        baseImage.fill(color);\n        let toggleBase = sprites.create(baseImage, SpriteKind.Player);\n        toggleBases.push(toggleBase);\n\n        // Position the knob at the leftmost position of the bar\n        toggleBase.setPosition(80, 60); // Default position\n\n        // make the square\n        let knobImage = image.create(25,20)\n        knobImage.drawRect(0,0,25,20,linecolor)\n        let toggleKnob = sprites.create(knobImage, SpriteKind.Player)\n        toggleKnobs.push(toggleKnob)\n\n        toggleKnob.setPosition(toggleBase.x - 12,toggleBase.y)\n        \n        // make the text\n\n        // Create a renderable text that will follow the slider\n        let toggleText = sprites.create(image.create(1, 1), SpriteKind.Player); // Create empty sprite for text\n        togglesTexts.push(toggleText); // Store the text sprite\n        let toggleText2 = sprites.create(image.create(1, 1), SpriteKind.Player); // Create empty sprite for text\n        togglesTexts.push(toggleText2); // Store the text sprite\n\n        scene.createRenderable(100, function (ctx) {\n            let text = \"On\";\n            let text2 = \"Off\"\n            // Create text above the slider\n            toggleText.setImage(image.create(text.length * 8, 8));\n            toggleText2.setImage(image.create(text.length * 8, 8));\n            toggleText.image.fill(0);  // Clear the image to create new text\n            toggleText2.image.fill(0)\n            toggleText.image.print(text, 0, 0);\n            toggleText2.image.print(text2, 0, 0)\n            toggleText.setPosition(toggleBase.x - 13, toggleBase.y);  // Position the text above the slider\n            toggleText2.setPosition(toggleBase.x + 10, toggleBase.y);\n        });\n\n        return toggleKnob,toggleBase;\n    }\n    //% block=\"set $toggle position to X $x Y $y\"\n    //% group=\"Functions\"\n    //% toggle.shadow=variables_get\n    export function setSliderPosition3(toggle: Sprite, x: number, y: number): void {\n        let index = toggleBases.indexOf(toggle);\n        if (index != -1) {\n            let toggleBase = toggleBases[index];\n            let toggleKnob = toggleKnobs[index]\n\n            toggleBase.setPosition(x, y);\n            toggleKnob.setPosition(toggleBase.x - 12,toggleBase.y)\n\n            \n        }\n    }\n    //%toggle.shadow=variables_get\n    //%block\n    export function control(toggle: Sprite): void {\n        selectedToggle = toggle\n    }\n    let toggleStates: boolean[] = []; // Store state for each toggle\n\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedToggle) {\n            let index = toggleBases.indexOf(selectedToggle);\n            if (index != -1) {\n                let toggleKnob = toggleKnobs[index];\n                let toggleBase = toggleBases[index];\n\n                // Ensure we have a state for this toggle\n                if (toggleStates[index] == undefined) {\n                    toggleStates[index] = false; // Default to false\n                }\n\n                if (toggleStates[index] == false) {\n                    toggleKnob.x = toggleBase.x + 13;\n                    toggleStates[index] = true;\n                } else {\n                    toggleKnob.x = toggleBase.x - 12;\n                    toggleStates[index] = false;\n                }\n            }\n        }\n    });\n    controller.A.onEvent(ControllerButtonEvent.Released, function() {\n        movingA = false\n    })\n    //%block=\"is $toggle value equal $boolea\"\n    //%toggle.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function getToggleValue(toggle: Sprite, boolea: boolean): boolean {\n        let index = toggleBases.indexOf(toggle);\n        if (index != -1) {\n            if (boolea === false) {\n            return toggleStates[index]; // Return the stored state or false if undefined\n            }else {\n                return !toggleStates[index];\n            }\n        }\n        return undefined;\n    }\n    //Cycling through the sliders\n    //%block=\"Cycle through toggles\"\n    export function cycleToNextSlider(): void {\n        c === 1\n    if (toggleBases.length = 0) return; // No sliders exist\n    // If no slider is selected, start from the first one\n    if (!selectedToggle) {\n        selectedToggle = toggleBases[0];\n} else {\n       \n            // Get the current index and cycle to the next slider\n            let index = toggleBases.indexOf(selectedToggle);\n            if (index != -1) {\n                index++\n                if (index >= toggleBases.length) {\n                index = 0; // If we reach the end, cycle back to the first one\n            }\n            selectedToggle = toggleBases[index];\n        }\n    }\n}\n    controller.B.onEvent(ControllerButtonEvent.Pressed, function() {\n        if (selectedToggle !== null) {\n    cycleToNextSlider(); // Trigger slider cycl\n        }\n})\n    //%block=\"Destroy $toggle\"\n    //%toggle.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function destroy(toggle: Sprite): void {\n        let index = toggleBases.indexOf(toggle);\n        if (index != -1) {\n            let toggleBase = toggleBases[index];\n            let toggleKnob = toggleKnobs[index]\n            toggleBase.destroy()\n            toggleKnob.destroy()\n            let toggleText = togglesTexts[index];\n            if (toggleText) {\n                toggleText.destroy();\n                togglesTexts.splice(index, 1);  // Remove the text sprite from the array\n            }\n            let toggleText2 = togglesTexts[index];\n            if (toggleText2) {\n                toggleText2.destroy();\n                togglesTexts.splice(index, 1);  // Remove the text sprite from the array\n            }\n\n            \n        }\n    }\n}","pxt.json":"{\n    \"name\": \"Toggle #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"custom.ts\",\n        \"y.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1743558527054}